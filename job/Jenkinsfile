// create new folder in workspace in this job where we clone the repo and copy the file to the desired location
def cloneRepositoryIfNotExists(String repoUrl, String branchName , String folderPath) {
    println 'Cloning repository...'
    println "Repository URL: ${repoUrl}"
    println "Branch Name: ${branchName}"
    println "Folder Path: ${folderPath}"

    // Ensure the target directory exists
    sh "mkdir -p ${folderPath}"

    // if exist then go inside and and check if that branch exist
    dir(folderPath) {
        def branchExists = sh(script: "git show-ref --verify --quiet refs/heads/${branchName}", returnStatus: true) == 0
        if (branchExists) {
            println "Branch '${branchName}' exists in the repository."
            return
        } else {
            println "Branch '${branchName}' does not exist in the repository."
            sh """
                #!/bin/bashgit
                
                mkdir -p ${folderPath}
                git clone --branch ${branchName} ${repoUrl} ${folderPath}
            """
            println "Repository cloned successfully to ${folderPath}"
        }
    }
}

// function fetch latest changes
def renameBranchAndFetch(String branchName, String repoPath) {
    String backupBranchName = "backup_${branchName}"
    println "Renaming branch '${branchName}' to '${backupBranchName}' and fetching again..."
    println "Repository Path: ${repoPath}"
    sh "cd ${repoPath}"
    sh """
        git branch -m ${branchName} ${backupBranchName}
        git fetch origin ${branchName}:${branchName}
        git checkout -b ${branchName}
        git branch -D ${backupBranchName}
    """
    println 'Branch renamed and fetched successfully.'
    println 'Current branches:'
    sh '''
        git branch -a
    '''
}

def trackChangesOrCommit(String filePath) {
    println "Tracking changes for file: ${filePath}"
    // Implement your logic to track changes in the specified file
    // This could involve checking file hashes, timestamps, etc.
    // For demonstration, we'll just print a message
    println 'Change tracking logic not implemented yet.'
}

pipeline {
    agent any
    stages {
        stage('I18n Resource File Sync') {
            steps {
                script {
                    println '==============================='
                    println 'Starting I18n Resource File Sync Job'

                    def workspacePath = pwd()
                    println "Workspace path: ${workspacePath}"
                    def repoFolder = 'resourceBundle'
                    def repoPath = "${workspacePath}/${repoFolder}"

                    // The git.properties file is expected to be in the workspace.
                    println 'Checking for properties file: git.properties'

                    if (fileExists('git.properties')) {
                        println 'Found properties file: git.properties'

                        // Read and display the file contents
                        def fileContent = readFile('git.properties')
                        println 'File contents:'
                        println fileContent
                        def props = [:]
                        fileContent.split('\n').each { line ->
                            line = line.trim()
                            if (line && !line.startsWith('#')) {
                                def parts = line.split('=', 2)
                                if (parts.length == 2) {
                                    props[parts[0].trim()] = parts[1].trim()
                                }
                            }
                        }

                        def githubUrl = props.githubUrl
                        def filePath = props.filePath
                        def branchName = props.branchName

                        cloneRepositoryIfNotExists(githubUrl, branchName, repoPath)
                        renameBranchAndFetch(branchName, repoPath)
                    } else {
                        // Fail the build if the properties file is not found
                        error 'Properties file not found in workspace: git.properties'
                    }
                }
            }
        }
    }
}
